// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bbralion/CTFloodBot/internal/genproto (interfaces: MultiplexerServiceClient,MultiplexerService_RegisterHandlerClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	genproto "github.com/bbralion/CTFloodBot/internal/genproto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockMultiplexerServiceClient is a mock of MultiplexerServiceClient interface.
type MockMultiplexerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMultiplexerServiceClientMockRecorder
}

// MockMultiplexerServiceClientMockRecorder is the mock recorder for MockMultiplexerServiceClient.
type MockMultiplexerServiceClientMockRecorder struct {
	mock *MockMultiplexerServiceClient
}

// NewMockMultiplexerServiceClient creates a new mock instance.
func NewMockMultiplexerServiceClient(ctrl *gomock.Controller) *MockMultiplexerServiceClient {
	mock := &MockMultiplexerServiceClient{ctrl: ctrl}
	mock.recorder = &MockMultiplexerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiplexerServiceClient) EXPECT() *MockMultiplexerServiceClientMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockMultiplexerServiceClient) GetConfig(arg0 context.Context, arg1 *genproto.ConfigRequest, arg2 ...grpc.CallOption) (*genproto.ConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfig", varargs...)
	ret0, _ := ret[0].(*genproto.ConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockMultiplexerServiceClientMockRecorder) GetConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockMultiplexerServiceClient)(nil).GetConfig), varargs...)
}

// RegisterHandler mocks base method.
func (m *MockMultiplexerServiceClient) RegisterHandler(arg0 context.Context, arg1 *genproto.RegisterRequest, arg2 ...grpc.CallOption) (genproto.MultiplexerService_RegisterHandlerClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterHandler", varargs...)
	ret0, _ := ret[0].(genproto.MultiplexerService_RegisterHandlerClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterHandler indicates an expected call of RegisterHandler.
func (mr *MockMultiplexerServiceClientMockRecorder) RegisterHandler(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandler", reflect.TypeOf((*MockMultiplexerServiceClient)(nil).RegisterHandler), varargs...)
}

// MockMultiplexerService_RegisterHandlerClient is a mock of MultiplexerService_RegisterHandlerClient interface.
type MockMultiplexerService_RegisterHandlerClient struct {
	ctrl     *gomock.Controller
	recorder *MockMultiplexerService_RegisterHandlerClientMockRecorder
}

// MockMultiplexerService_RegisterHandlerClientMockRecorder is the mock recorder for MockMultiplexerService_RegisterHandlerClient.
type MockMultiplexerService_RegisterHandlerClientMockRecorder struct {
	mock *MockMultiplexerService_RegisterHandlerClient
}

// NewMockMultiplexerService_RegisterHandlerClient creates a new mock instance.
func NewMockMultiplexerService_RegisterHandlerClient(ctrl *gomock.Controller) *MockMultiplexerService_RegisterHandlerClient {
	mock := &MockMultiplexerService_RegisterHandlerClient{ctrl: ctrl}
	mock.recorder = &MockMultiplexerService_RegisterHandlerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiplexerService_RegisterHandlerClient) EXPECT() *MockMultiplexerService_RegisterHandlerClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockMultiplexerService_RegisterHandlerClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMultiplexerService_RegisterHandlerClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMultiplexerService_RegisterHandlerClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMultiplexerService_RegisterHandlerClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMultiplexerService_RegisterHandlerClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMultiplexerService_RegisterHandlerClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMultiplexerService_RegisterHandlerClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMultiplexerService_RegisterHandlerClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMultiplexerService_RegisterHandlerClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockMultiplexerService_RegisterHandlerClient) Recv() (*genproto.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*genproto.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMultiplexerService_RegisterHandlerClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMultiplexerService_RegisterHandlerClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockMultiplexerService_RegisterHandlerClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMultiplexerService_RegisterHandlerClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMultiplexerService_RegisterHandlerClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockMultiplexerService_RegisterHandlerClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMultiplexerService_RegisterHandlerClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMultiplexerService_RegisterHandlerClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockMultiplexerService_RegisterHandlerClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMultiplexerService_RegisterHandlerClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMultiplexerService_RegisterHandlerClient)(nil).Trailer))
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: mux.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MultiplexerServiceClient is the client API for MultiplexerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiplexerServiceClient interface {
	GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	RegisterHandler(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (MultiplexerService_RegisterHandlerClient, error)
}

type multiplexerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiplexerServiceClient(cc grpc.ClientConnInterface) MultiplexerServiceClient {
	return &multiplexerServiceClient{cc}
}

func (c *multiplexerServiceClient) GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/mux.MultiplexerService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiplexerServiceClient) RegisterHandler(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (MultiplexerService_RegisterHandlerClient, error) {
	stream, err := c.cc.NewStream(ctx, &MultiplexerService_ServiceDesc.Streams[0], "/mux.MultiplexerService/RegisterHandler", opts...)
	if err != nil {
		return nil, err
	}
	x := &multiplexerServiceRegisterHandlerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MultiplexerService_RegisterHandlerClient interface {
	Recv() (*Update, error)
	grpc.ClientStream
}

type multiplexerServiceRegisterHandlerClient struct {
	grpc.ClientStream
}

func (x *multiplexerServiceRegisterHandlerClient) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MultiplexerServiceServer is the server API for MultiplexerService service.
// All implementations must embed UnimplementedMultiplexerServiceServer
// for forward compatibility
type MultiplexerServiceServer interface {
	GetConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
	RegisterHandler(*RegisterRequest, MultiplexerService_RegisterHandlerServer) error
	mustEmbedUnimplementedMultiplexerServiceServer()
}

// UnimplementedMultiplexerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMultiplexerServiceServer struct {
}

func (UnimplementedMultiplexerServiceServer) GetConfig(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedMultiplexerServiceServer) RegisterHandler(*RegisterRequest, MultiplexerService_RegisterHandlerServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterHandler not implemented")
}
func (UnimplementedMultiplexerServiceServer) mustEmbedUnimplementedMultiplexerServiceServer() {}

// UnsafeMultiplexerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiplexerServiceServer will
// result in compilation errors.
type UnsafeMultiplexerServiceServer interface {
	mustEmbedUnimplementedMultiplexerServiceServer()
}

func RegisterMultiplexerServiceServer(s grpc.ServiceRegistrar, srv MultiplexerServiceServer) {
	s.RegisterService(&MultiplexerService_ServiceDesc, srv)
}

func _MultiplexerService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiplexerServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mux.MultiplexerService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiplexerServiceServer).GetConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiplexerService_RegisterHandler_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MultiplexerServiceServer).RegisterHandler(m, &multiplexerServiceRegisterHandlerServer{stream})
}

type MultiplexerService_RegisterHandlerServer interface {
	Send(*Update) error
	grpc.ServerStream
}

type multiplexerServiceRegisterHandlerServer struct {
	grpc.ServerStream
}

func (x *multiplexerServiceRegisterHandlerServer) Send(m *Update) error {
	return x.ServerStream.SendMsg(m)
}

// MultiplexerService_ServiceDesc is the grpc.ServiceDesc for MultiplexerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiplexerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mux.MultiplexerService",
	HandlerType: (*MultiplexerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _MultiplexerService_GetConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterHandler",
			Handler:       _MultiplexerService_RegisterHandler_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mux.proto",
}
